// Generated by CoffeeScript 1.6.3
(function() {
  var funToString, isFunction, overrideAction, pass, toString;

  toString = {}.toString;

  isFunction = function(obj) {
    return toString.call(obj) === '[object Function]';
  };

  funToString = function(fun) {
    var bodyEnds, bodyStarts;
    fun = fun.toString();
    bodyStarts = fun.indexOf('{') + 1;
    bodyEnds = fun.lastIndexOf('}');
    return fun.substring(bodyStarts, bodyEnds);
  };

  overrideAction = function(rule, code) {
    if (code === void 0) {
      return rule;
    }
    if (isFunction(code)) {
      code = funToString(code);
    }
    if (code === '__skip__') {
      return rule;
    }
    if (rule.type !== 'action') {
      rule = {
        type: 'action',
        expression: rule
      };
    }
    rule.code = code;
    return rule;
  };

  module.exports = pass = function(ast, options) {
    var alternative, alternativeIndex, alternatives, myOptions, newValue, newValueIsArray, override, rule, ruleIndex, rules, _i, _j, _len, _len1;
    myOptions = options.overrideActionPlugin;
    rules = ast.rules;
    override = myOptions.rules || {};
    if (isFunction(override)) {
      return override(ast, options);
    }
    for (ruleIndex = _i = 0, _len = rules.length; _i < _len; ruleIndex = ++_i) {
      rule = rules[ruleIndex];
      newValue = override[rule.name];
      newValueIsArray = Array.isArray(newValue);
      if (newValue == null) {
        continue;
      }
      if (newValueIsArray && rule.expression.type === 'choice') {
        alternatives = rule.expression.alternatives;
        if (alternatives.length !== newValue.length) {
          throw new Error("Rule " + rule.name + " mismatch (alternatives " + alternatives.length + " != " + newValue.length);
        }
        for (alternativeIndex = _j = 0, _len1 = alternatives.length; _j < _len1; alternativeIndex = ++_j) {
          alternative = alternatives[alternativeIndex];
          alternatives[alternativeIndex] = overrideAction(alternative, newValue[alternativeIndex]);
        }
      } else if (!newValueIsArray) {
        rule.expression = overrideAction(rule.expression, newValue);
      } else {
        throw new Error("Rule " + rule.name + " mismatch (needs no alternatives)");
      }
    }
    return ast;
  };

  module.exports.use = function(config, options) {
    var stage;
    if (options == null) {
      options = {};
    }
    if (options.overrideActionPlugin == null) {
      throw new Error('Please define overrideActionPlugin as an option to PEGjs');
    }
    stage = config.passes.transform;
    return stage.unshift(pass);
  };

}).call(this);
